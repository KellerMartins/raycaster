// Based on: https://github.com/ssloy/tinyraycaster/wiki
let width = 512
let height = 512
let depthStep = 0.001

var debugText = document.getElementById('debugText')

// Canvas setup
var canvas = document.getElementById('canvas')
var ctx = canvas.getContext('2d')

canvas.width = width
canvas.height = height

function resize() {
  var scale = Math.min(window.innerWidth/width, window.innerHeight/height)
  canvas.style.width = (width * scale) + "px"
  canvas.style.height = (height * scale) + "px"
}

window.addEventListener("resize", resize)
resize()

var imgdata = ctx.getImageData(0, 0, width, height)
var image = imgdata.data

// Button callbacks
buttons = {"FWD":false,   "BACK":false,
          "LEFT":false,  "RIGHT":false,
          "SHOOT":false, "ESC":false}

function setKey(key, val) {
  keyToButton = {
    "Down": 'BACK',
    "ArrowDown": 'BACK',
    "Up": 'FWD',
    "ArrowUp": 'FWD',
    "Left": 'LEFT',
    "ArrowLeft": 'LEFT',
    "Right": 'RIGHT',
    "ArrowRight": 'RIGHT',
    " ": 'SHOOT',
    "Esc": 'ESC',
    "Escape": 'ESC',
  }
  buttons[keyToButton[key]] = val
}

window.addEventListener('keydown', (e) => {
  if (!e.repeat)
    setKey(e.key, true)
});

window.addEventListener('keyup', (e) => {
  setKey(e.key, false)
});


// Game setup function
function createGame(mapDiagram) {
  var player = {x: 0, y: 0, angle: Math.PI/2, fov: 65, 
                speed: 3, turnspeed: 5}
  
  var map = {}
  map.textures = {
    wall: {
      width: 128,
      height: 128,
      palette: [
        {r:90,  g:90,  b:90},
        {r:108,  g:110,  b:91},
        {r:63,  g:51,  b:66},
        {r:72,  g:69,  b:79},
      ],
      rawdata
    }
  }

  for (var [k, v] of Object.entries(map.textures)) {
    map.textures[k].data = [...Array(v.width)].map(x => Array(v.height).fill([0,0,0]))
    for (let y = 0; y < v.height; y++) {
      let row = v.rawdata.slice(y*v.width, y*v.width + v.width).split("")
      for (let x = 0; x < v.width; x++) {
        let col = v.palette[+row[x]]
        map.textures[k].data[x][y] = [col.r, col.g, col.b]
      }
    }
  }

  map.entities = {
    empty: 0,
    wall: 1,
    player: 2,
    sprite: 3,
    '' : 0,
    '  ' : 0,
    '##' : 1,
    'P' : 2,
    'S' : 3,
  }

  map.sprites = []

  map.diagram = mapDiagram
  var m = mapDiagram.split('\n')

  map.width = Math.max(...m.map(x => x.length))/2
  map.height = m.length

  map.data = [...Array(map.width)].map(x => Array(map.height).fill(map.entities.empty))
  m.map((x, i) => {
    for(let j=0; j<x.length/2; j++) {
      let ent = map.entities[x.slice(j*2, j*2+2).trim()]
      map.data[j][i] = ent

      if (ent == map.entities.player) {
        map.data[j][i] = map.entities.empty
        player.x = j
        player.y = i
      } else if (ent == map.entities.sprite) {
        map.data[j][i] = map.entities.empty
        map.sprites.push({x:j, y:i})
      }
    }
  })

  return {map: map, player: player}
}

function renderBackground(renderbuffer) {
  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      let t = (y-height/2)/(height/2)
      let col = y < height/2 ? {r:28, g:22, b:30} : 
                              {r:53*t + 23*(1-t),
                               g:47*t + 21*(1-t),
                               b:56*t + 26*(1-t)}
      let i = x + y*width
      renderbuffer[i*4]     = col.r
      renderbuffer[i*4 + 1] = col.g
      renderbuffer[i*4 + 2] = col.b
      renderbuffer[i*4 + 3] = 255
    }
  }
}

function renderScene(renderbuffer, depth, g) {
  let fogcol = {r:28, g:22, b:30}
  for (let x = 0; x < width; x++) {
    
    let angle = g.player.angle + (g.player.fov*(x/width - 0.5))*Math.PI/180
    let dx = Math.cos(angle)
    let dy = Math.sin(angle)

    
    // Original, constant step
    //for (var d = 0.1; d < 10; d+=depthStep) {
    //  let yi = Math.round(g.player.y + dy*d)
    //  let xi = Math.round(g.player.x + dx*d)
    //  if (xi >= g.map.width || xi < 0 ||
    //      yi >= g.map.height || yi < 0 ||
    //      g.map.data[xi][yi] === g.map.entities.wall)
    //  {
    //    break
    //  }
    //}
    

    // Optimized, variable step
    var step = depthStep
    for (var d = 0.02; d < depth[x]; d+=step) {
      let yi = Math.round(g.player.y + dy*d)
      let xi = Math.round(g.player.x + dx*d)
      if (xi >= g.map.width || xi < 0 ||
          yi >= g.map.height || yi < 0 ||
          g.map.data[xi][yi] === g.map.entities.wall)
      {
        if (step > depthStep) {
          d -= step;
          step = depthStep;
        } else {
          break
        }
      }

      // If the next space is still empty after
      // increasing the step, increase it
      let nextstep = Math.min(1, step*2)
      let nextx = Math.round(g.player.x+dx*(d+nextstep))
      let nexty = Math.round(g.player.y+dy*(d+nextstep))
      if (nextx < g.map.width && nextx >= 0 && g.map.data[nextx][yi] !== g.map.entities.wall &&
          nexty < g.map.height && nexty >= 0 && g.map.data[xi][nexty] !== g.map.entities.wall){
        step = nextstep
      } else {
        step = depthStep;
      }
    }

    depth[x] = d

    // Lighting values
    let fog = Math.max(1-d/5, 0);
    let torch = Math.max(1-d/2, 0);

    // Draw wall line
    let wallSize = 1/(d * Math.cos(angle - g.player.angle)) * 200
    let min =  height/2 - wallSize
    let max =  height/2 + wallSize
    for (var y = Math.max(min, 0); y < Math.min(max, height); y++) {
      let i = x + Math.round(y)*width

      let cy = g.player.y + dy*d
      let cx = g.player.x + dx*d
      let hitx = cx - Math.floor(cx+0.5)
      let hity = cy - Math.floor(cy+0.5)
      let u = 0.5 + (Math.abs(hitx) < Math.abs(hity)? hitx : hity)
      let v = (y-min)/(max-min)

      let col = g.map.textures.wall.data
                  [Math.floor(u*g.map.textures.wall.width)]
                  [Math.floor(v*g.map.textures.wall.height)]

      renderbuffer[i*4]     = Math.round(col[0]*(fog+torch) + fogcol.r*(1-fog))
      renderbuffer[i*4 + 1] = Math.round(col[1]*(fog+torch*0.5) + fogcol.g*(1-fog))
      renderbuffer[i*4 + 2] = Math.round(col[2]*fog + fogcol.b*(1-fog))
      renderbuffer[i*4 + 3] = 255
    }
  }
}

function renderSprites(renderbuffer, depth, g) {
  let fogcol = {r:28, g:22, b:30}
  for (let s of g.map.sprites) {
    let diffx = s.x - g.player.x
    let diffy = s.y - g.player.y
    let spritedir = Math.atan2(diffy, diffx)

    while (spritedir - g.player.angle >  Math.PI) spritedir -= 2*Math.PI; 
    while (spritedir - g.player.angle < -Math.PI) spritedir += 2*Math.PI;

    let d = Math.sqrt(diffx*diffx + diffy*diffy)

    // Draw sprite line
    let spritesize = Math.round(Math.min(1000, height/d))
    let offsetx = Math.round((spritedir - g.player.angle) * width / (g.player.fov*Math.PI/180) + width/2 - spritesize/2)
    let offsety = Math.round(height/2 - spritesize/2)

    // Lighting values
    let fog = Math.max(1-d/5, 0);
    let torch = Math.max(1-d/2, 0);

    for (let sx = 0; sx < spritesize; sx++) {
      let x = offsetx+sx
      if(x < 0 || x > width || depth[x] < d)
        continue
      depth[x] = d
      for (let sy = 0; sy < spritesize; sy++) {
        let y = offsety+sy
        if(y < 0 || y > height)
          continue

        let i = x + y*width
        let u = sx/spritesize
        let v = sy/spritesize

        let col = g.map.textures.wall.data
                    [Math.floor(u*g.map.textures.wall.width)]
                    [Math.floor(v*g.map.textures.wall.height)]

        renderbuffer[i*4]     = Math.round(col[0]*(fog+torch) + fogcol.r*(1-fog))
        renderbuffer[i*4 + 1] = Math.round(col[1]*(fog+torch*0.5) + fogcol.g*(1-fog))
        renderbuffer[i*4 + 2] = Math.round(col[2]*fog + fogcol.b*(1-fog))
        renderbuffer[i*4 + 3] = 255
      }
    }
  }
}

let g = createGame(`
  ####################
  ##                ##
  ##  P     ##########
  ##        ##      ##
  ##  S S           ##
  ####S ######      ##
  ##        ##      ##
  ##        ##      ##
  ##        ##      ##
  ####################
`)

function renderUI(renderbuffer, g) {
  let mapScale = 8
  let entityScale = 4
  for (let x = 0; x < g.map.width; x++) {
    for (let y = 0; y < g.map.height; y++) {
      let ent = g.map.data[x][y]
      if (ent == g.map.entities.empty)
        continue
      
      let col = {r:0.5, g:0.5, b:0.5}
      var scale = ent !== g.map.entities.wall? entityScale : mapScale
      for (let px=0; px < scale; px++){
        for (let py=0; py < scale; py++){
          let i = x*mapScale+px-(mapScale-scale)/2 + (y*mapScale+py-(mapScale-scale)/2)*width
          renderbuffer[i*4]     = col.r * 255
          renderbuffer[i*4 + 1] = col.g * 255
          renderbuffer[i*4 + 2] = col.b * 255
          renderbuffer[i*4 + 3] = 255
        }
      }
    }
  }

  // Render player icon on the map
  for (let px=0; px < entityScale; px++){
    for (let py=0; py < entityScale; py++){
      let i = Math.round(g.player.x*mapScale+px+(mapScale-entityScale)/2) + 
              Math.round(g.player.y*mapScale+py+(mapScale-entityScale)/2)*width
      renderbuffer[i*4]     = 0
      renderbuffer[i*4 + 1] = 255
      renderbuffer[i*4 + 2] = 0
      renderbuffer[i*4 + 3] = 255
    }
  }
}

// Run game
;(update = function(deltaTime) {
  let start = Date.now()
  debugText.textContent = ""

  // Render to imgdata data array
  var depth = Array(width).fill(Math.ceil(Math.sqrt(g.map.width*g.map.width + g.map.height*g.map.height)))
  renderBackground(image)
  renderScene(image, depth, g)
  renderSprites(image, depth, g)
  renderUI(image, g)

  // Pass data to canvas
  ctx.putImageData(imgdata, 0, 0)

  // Controls
  let walk = buttons['FWD'] ? 1 : buttons['BACK'] ? -1 : false
  if (walk) {
    g.player.x += walk * Math.cos(g.player.angle) * g.player.speed * deltaTime
    g.player.y += walk * Math.sin(g.player.angle) * g.player.speed * deltaTime
    if (g.map.data[Math.round(g.player.x)][Math.round(g.player.y)] === g.map.entities.wall) {
      g.player.x -= walk * Math.cos(g.player.angle) * g.player.speed * deltaTime
      g.player.y -= walk * Math.sin(g.player.angle) * g.player.speed * deltaTime
    }
  }

  let turn = buttons['LEFT'] ? -1 : buttons['RIGHT'] ? 1 : false
  if (turn) {
    g.player.angle += turn * g.player.turnspeed * deltaTime
  }

  // Calculate delta time
  deltaTime = (Date.now() - start)/1000
  debugText.textContent += deltaTime*1000 + " ms"
  
  setTimeout(update, Math.max(0, 30-deltaTime), deltaTime)
})(0)